@page "/weatherforecasts/edit/{id:guid}"
@attribute [Authorize]
@using Microsoft.AspNetCore.Authorization
@using uServiceDemo.Contracts
@using uServiceDemo.Contracts.Requests
@using uServiceDemo.UI.Services
@inject IWeatherForecastService WeatherForecastService
@inject NavigationManager NavigationManager

<PageTitle>Edit Weather Forecast</PageTitle>

<h1>Edit Weather Forecast</h1>

@if (forecast == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-6">
            <EditForm Model="@model" OnValidSubmit="@HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-3">
                    <label for="date" class="form-label">Date</label>
                    <InputDate id="date" @bind-Value="model.Date" class="form-control" />
                    <ValidationMessage For="@(() => model.Date)" />
                </div>

                <div class="mb-3">
                    <label for="temperature" class="form-label">Temperature (Celsius)</label>
                    <InputNumber id="temperature" @bind-Value="model.TemperatureInCelsius" class="form-control" />
                    <ValidationMessage For="@(() => model.TemperatureInCelsius)" />
                </div>

                <div class="mb-3">
                    <label for="summary" class="form-label">Summary</label>
                    <InputText id="summary" @bind-Value="model.Summary" class="form-control" />
                    <ValidationMessage For="@(() => model.Summary)" />
                </div>

                <div class="mb-3">
                    <label for="windSpeed" class="form-label">Wind Speed (km/h)</label>
                    <InputNumber id="windSpeed" @bind-Value="model.WindSpeed" class="form-control" />
                    <ValidationMessage For="@(() => model.WindSpeed)" />
                </div>

                <div class="mb-3">
                    <label for="windDirection" class="form-label">Wind Direction</label>
                    <InputSelect id="windDirection" @bind-Value="model.WindDirection" class="form-control">
                        <option value="">-- Select Direction --</option>
                        <option value="@WindDirection.N">N (North)</option>
                        <option value="@WindDirection.NE">NE (Northeast)</option>
                        <option value="@WindDirection.E">E (East)</option>
                        <option value="@WindDirection.SE">SE (Southeast)</option>
                        <option value="@WindDirection.S">S (South)</option>
                        <option value="@WindDirection.SW">SW (Southwest)</option>
                        <option value="@WindDirection.W">W (West)</option>
                        <option value="@WindDirection.NW">NW (Northwest)</option>
                    </InputSelect>
                    <ValidationMessage For="@(() => model.WindDirection)" />
                </div>

                <div class="mb-3">
                    <button type="submit" class="btn btn-primary">Save</button>
                    <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
                </div>

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger" role="alert">
                        @errorMessage
                    </div>
                }
            </EditForm>
        </div>
    </div>
}

@code {
    [Parameter]
    public Guid Id { get; set; }

    private WeatherForecast? forecast;
    private UpdateWeatherForecastRequest model = new()
    {
        Summary = string.Empty
    };

    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        forecast = await WeatherForecastService.GetByIdAsync(Id);
        if (forecast != null)
        {
            model = new UpdateWeatherForecastRequest
            {
                Date = forecast.Date,
                TemperatureInCelsius = forecast.TemperatureInCelsius,
                Summary = forecast.Summary,
                WindSpeed = forecast.WindSpeed,
                WindDirection = forecast.WindDirection
            };
        }
        else
        {
            errorMessage = "Weather forecast not found.";
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            errorMessage = null;
            await WeatherForecastService.UpdateAsync(Id, model);
            NavigationManager.NavigateTo("/weatherforecasts");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error updating weather forecast: {ex.Message}";
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/weatherforecasts");
    }
}
