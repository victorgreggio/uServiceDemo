@page "/weatherforecasts"
@attribute [Authorize]
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Web
@using uServiceDemo.Contracts
@using uServiceDemo.UI.Services
@inject IWeatherForecastService WeatherForecastService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<PageTitle>Weather Forecasts</PageTitle>

<h1>Weather Forecasts</h1>

<p>Manage your weather forecasts.</p>

<div class="row mb-3">
    <div class="col-md-8">
        <div class="input-group">
            <input type="text" class="form-control" placeholder="Search by summary..." @bind="searchTerm" @bind:event="oninput" @onkeydown="HandleSearchKeyDown" />
            <button class="btn btn-outline-secondary" type="button" @onclick="SearchForecasts">Search</button>
            <button class="btn btn-outline-secondary" type="button" @onclick="ClearSearch">Clear</button>
        </div>
    </div>
    <div class="col-md-4">
        <button class="btn btn-primary" @onclick="NavigateToCreate">Create New</button>
    </div>
</div>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else if (!forecasts.Any())
{
    <p><em>No weather forecasts found.</em></p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temperature (C)</th>
                <th>Temperature (F)</th>
                <th>Summary</th>
                <th>Wind</th>
                <th>Created</th>
                <th>Last Updated</th>
                <th>Updated By</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureInCelsius</td>
                    <td>@forecast.TemperatureInFahrenheit</td>
                    <td>@forecast.Summary</td>
                    <td>
                        @if (forecast.WindSpeed.HasValue && forecast.WindDirection.HasValue)
                        {
                            <text>@forecast.WindSpeed km/h @forecast.WindDirection</text>
                        }
                        else
                        {
                            <text>N/A</text>
                        }
                    </td>
                    <td>@forecast.Created.ToShortDateString()</td>
                    <td>@forecast.LastUpdated.ToShortDateString()</td>
                    <td>@forecast.UpdatedBy</td>
                    <td>
                        <button class="btn btn-sm btn-info" @onclick="() => NavigateToView(forecast.Id)">View</button>
                        <button class="btn btn-sm btn-primary" @onclick="() => NavigateToEdit(forecast.Id)">Edit</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteForecast(forecast.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private IEnumerable<WeatherForecast>? forecasts;
    private string searchTerm = string.Empty;
    private bool isSearchMode = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadForecasts();
    }

    private async Task LoadForecasts()
    {
        forecasts = await WeatherForecastService.GetAllAsync();
        isSearchMode = false;
    }

    private async Task SearchForecasts()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            await LoadForecasts();
            return;
        }

        try
        {
            forecasts = await WeatherForecastService.SearchAsync(searchTerm);
            isSearchMode = true;
        }
        catch
        {
            forecasts = Array.Empty<WeatherForecast>();
        }
    }

    private async Task ClearSearch()
    {
        searchTerm = string.Empty;
        await LoadForecasts();
    }

    private async Task HandleSearchKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchForecasts();
        }
    }

    private void NavigateToCreate()
    {
        NavigationManager.NavigateTo("/weatherforecasts/create");
    }

    private void NavigateToView(Guid id)
    {
        NavigationManager.NavigateTo($"/weatherforecasts/view/{id}");
    }

    private void NavigateToEdit(Guid id)
    {
        NavigationManager.NavigateTo($"/weatherforecasts/edit/{id}");
    }

    private async Task DeleteForecast(Guid id)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this forecast?"))
        {
            await WeatherForecastService.DeleteAsync(id);
            if (isSearchMode && !string.IsNullOrWhiteSpace(searchTerm))
            {
                await SearchForecasts();
            }
            else
            {
                await LoadForecasts();
            }
        }
    }
}
